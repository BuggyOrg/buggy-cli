{
  "code": "\n\n(defco fold [list fn init]\n  (logic/mux\n    list\n    (functional/apply (functional/partial fn (array/first list)) (fold (array/rest list) fn init))\n    (array/empty list)))\n\n(defco filter [list fn]\n  (fold list (functional/partial (lambda (fn acc cur)\n    (logic/mux\n      (array/append acc cur)\n      acc\n      (functional/apply fn cur))) fn) []))\n\n(io/stdout (translator/array_to_string (filter (translator/string_to_array (io/stdin)) (lambda (n) (math/less n 10)))))\n",
  "nodes": [
    {
      "v": "defco_fold",
      "value": {
        "id": "fold",
        "inputPorts": {
          "list": "generic",
          "fn": "generic",
          "init": "generic"
        },
        "outputPorts": {
          "value": "generic"
        },
        "implementation": {
          "nodes": [
            {
              "meta": "logic/mux",
              "name": "mux_0"
            },
            {
              "meta": "functional/apply",
              "name": "apply_1"
            },
            {
              "meta": "functional/partial",
              "params": {
                "partial": 1
              },
              "name": "partial_2"
            },
            {
              "meta": "array/first",
              "name": "first_3"
            },
            {
              "meta": "fold",
              "name": "fold_4"
            },
            {
              "meta": "array/rest",
              "name": "rest_5"
            },
            {
              "meta": "array/empty",
              "name": "empty_6"
            }
          ],
          "edges": [
            {
              "from": "list",
              "to": "mux_0:input1"
            },
            {
              "from": "fn",
              "to": "partial_2:fn"
            },
            {
              "from": "list",
              "to": "first_3:array"
            },
            {
              "from": "first_3:value",
              "to": "partial_2:value"
            },
            {
              "from": "partial_2:result",
              "to": "apply_1:fn"
            },
            {
              "from": "list",
              "to": "rest_5:array"
            },
            {
              "from": "rest_5:rest",
              "to": "fold_4:list"
            },
            {
              "from": "fn",
              "to": "fold_4:fn"
            },
            {
              "from": "init",
              "to": "fold_4:init"
            },
            {
              "from": "fold_4:value",
              "to": "apply_1:value"
            },
            {
              "from": "apply_1:result",
              "to": "mux_0:input2"
            },
            {
              "from": "list",
              "to": "empty_6:array"
            },
            {
              "from": "empty_6:isEmpty",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "value"
            }
          ]
        },
        "name": "defco_fold"
      }
    },
    {
      "v": "stdout_13",
      "value": {
        "meta": "io/stdout",
        "name": "stdout_13"
      }
    },
    {
      "v": "array_to_string_14",
      "value": {
        "meta": "translator/array_to_string",
        "name": "array_to_string_14"
      }
    },
    {
      "v": "filter_15",
      "value": {
        "id": "filter",
        "inputPorts": {
          "list": "generic",
          "fn": "generic"
        },
        "outputPorts": {
          "value": "generic"
        },
        "implementation": {
          "nodes": [
            {
              "meta": "fold",
              "name": "fold_7"
            },
            {
              "meta": "functional/partial",
              "params": {
                "partial": 0
              },
              "name": "partial_8"
            },
            {
              "meta": "functional/lambda",
              "name": "lambda_9",
              "outputPorts": {
                "fn": "lambda"
              },
              "inputPorts": {},
              "data": {
                "outputPorts": {
                  "value_0": "generic"
                },
                "inputPorts": {
                  "fn": "generic",
                  "acc": "generic",
                  "cur": "generic"
                },
                "implementation": {
                  "nodes": [
                    {
                      "meta": "logic/mux",
                      "name": "mux_10"
                    },
                    {
                      "meta": "array/append",
                      "name": "append_11"
                    },
                    {
                      "meta": "functional/apply",
                      "name": "apply_12"
                    }
                  ],
                  "edges": [
                    {
                      "from": "acc",
                      "to": "append_11:array"
                    },
                    {
                      "from": "cur",
                      "to": "append_11:value"
                    },
                    {
                      "from": "append_11:result",
                      "to": "mux_10:input1"
                    },
                    {
                      "from": "acc",
                      "to": "mux_10:input2"
                    },
                    {
                      "from": "fn",
                      "to": "apply_12:fn"
                    },
                    {
                      "from": "cur",
                      "to": "apply_12:value"
                    },
                    {
                      "from": "apply_12:result",
                      "to": "mux_10:control"
                    },
                    {
                      "from": "mux_10:output",
                      "to": "value_0"
                    }
                  ]
                }
              }
            }
          ],
          "edges": [
            {
              "from": "list",
              "to": "fold_7:list"
            },
            {
              "from": "lambda_9:fn",
              "to": "partial_8:fn"
            },
            {
              "from": "fn",
              "to": "partial_8:value"
            },
            {
              "from": "partial_8:result",
              "to": "fold_7:fn"
            },
            {
              "from": "fold_7:value",
              "to": "value"
            }
          ]
        },
        "name": "filter_15"
      }
    },
    {
      "v": "string_to_array_16",
      "value": {
        "meta": "translator/string_to_array",
        "name": "string_to_array_16"
      }
    },
    {
      "v": "stdin_17",
      "value": {
        "meta": "io/stdin",
        "name": "stdin_17"
      }
    },
    {
      "v": "lambda_18",
      "value": {
        "meta": "functional/lambda",
        "name": "lambda_18",
        "outputPorts": {
          "fn": "lambda"
        },
        "inputPorts": {},
        "data": {
          "outputPorts": {
            "value_0": "generic"
          },
          "inputPorts": {
            "n": "generic"
          },
          "implementation": {
            "nodes": [
              {
                "meta": "math/less",
                "name": "less_19"
              },
              {
                "meta": "math/const",
                "name": "const(10)_20",
                "params": {
                  "value": 10
                }
              }
            ],
            "edges": [
              {
                "from": "n",
                "to": "less_19:isLess"
              },
              {
                "from": "const(10)_20:output",
                "to": "less_19:than"
              },
              {
                "from": "less_19:value",
                "to": "value_0"
              }
            ]
          }
        }
      }
    }
  ],
  "edges": [
    {
      "v": "stdin_17",
      "w": "string_to_array_16",
      "value": {
        "outPort": "output",
        "inPort": "input"
      }
    },
    {
      "v": "string_to_array_16",
      "w": "filter_15",
      "value": {
        "outPort": "output",
        "inPort": "list"
      }
    },
    {
      "v": "lambda_18",
      "w": "filter_15",
      "value": {
        "outPort": "fn",
        "inPort": "fn"
      }
    },
    {
      "v": "filter_15",
      "w": "array_to_string_14",
      "value": {
        "outPort": "value",
        "inPort": "input"
      }
    },
    {
      "v": "array_to_string_14",
      "w": "stdout_13",
      "value": {
        "outPort": "output",
        "inPort": "input"
      }
    }
  ]
}